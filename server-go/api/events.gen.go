// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Event defines model for Event.
type Event struct {
	// Date When the event takes place
	Date time.Time `json:"date"`
	Id   string    `json:"id"`

	// Location Where will it be held
	Location Location `json:"location"`

	// Name Name of the event
	Name string `json:"name"`
}

// EventError Error
type EventError struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// Location defines model for Location.
type Location struct {
	Name string `json:"name"`
}

// EventsListParams defines parameters for EventsList.
type EventsListParams struct {
	Filter string `form:"filter" json:"filter"`
}

// EventsCreateJSONRequestBody defines body for EventsCreate for application/json ContentType.
type EventsCreateJSONRequestBody = Event

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /events)
	EventsList(c *gin.Context, params EventsListParams)

	// (POST /events)
	EventsCreate(c *gin.Context)

	// (DELETE /events/{id})
	EventsDelete(c *gin.Context, id string)

	// (GET /events/{id})
	EventsRead(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// EventsList operation middleware
func (siw *ServerInterfaceWrapper) EventsList(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params EventsListParams

	// ------------- Required query parameter "filter" -------------

	if paramValue := c.Query("filter"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument filter is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "filter", c.Request.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter filter: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.EventsList(c, params)
}

// EventsCreate operation middleware
func (siw *ServerInterfaceWrapper) EventsCreate(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.EventsCreate(c)
}

// EventsDelete operation middleware
func (siw *ServerInterfaceWrapper) EventsDelete(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.EventsDelete(c, id)
}

// EventsRead operation middleware
func (siw *ServerInterfaceWrapper) EventsRead(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.EventsRead(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/events", wrapper.EventsList)
	router.POST(options.BaseURL+"/events", wrapper.EventsCreate)
	router.DELETE(options.BaseURL+"/events/:id", wrapper.EventsDelete)
	router.GET(options.BaseURL+"/events/:id", wrapper.EventsRead)
}
